"0",""
"0",""
"0","#Now map the result"
"0","quality = ""high"""
"0","maps <- wbgmaps::wbgmaps[[quality]]"
"0",""
"0","country_metadata <- wbstats::wbcountries()"
"0",""
"0",""
"0",""
"0",""
"0","spi_mapper  <- function(data, indicator, title) {"
"0","  "
"0"," indicator<-indicator"
"0",""
"0","  map_df <- get(data) %>%"
"0","    filter(date==max(date, na.rm=T)) %>%"
"0","    filter(!(country %in% c('Greenland'))) %>% #drop a few countries for which we do not collect data."
"0","    group_by( country) %>%"
"0","    #summarise(across(!! indicator,last)) %>%"
"0","    rename(data_available=!! indicator) %>%"
"0","    select(iso3c, date, data_available, weights) %>%"
"0","    right_join(country_metadata) %>%"
"0","    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available)))     "
"0",""
"0","  "
"0","  "
"0","   p1 <- ggplot() +"
"0","    geom_map(data = map_df, aes(map_id = iso3c, fill = 100*data_available), map = maps$countries) + "
"0","    geom_polygon(data = maps$disputed, aes(long, lat, group = group, map_id = id), fill = ""grey80"") + "
"0","    geom_polygon(data = maps$lakes, aes(long, lat, group = group), fill = ""white"")  +"
"0","     geom_path(data = maps$boundaries,"
"0","               aes(long, lat, group = group),"
"0","               color = ""white"","
"0","               size = 0.1,"
"0","               lineend = maps$boundaries$lineend,"
"0","              linetype = maps$boundaries$linetype) +"
"0","    scale_x_continuous(expand = c(0, 0), limits = standard_crop_wintri()$xlim) +"
"0","    scale_y_continuous(expand = c(0, 0), limits = standard_crop_wintri()$ylim) +"
"0","  scale_fill_distiller(palette = ""RdYlGn"","
"0","                       direction=1,"
"0","                       limits = c(0,100))  +"
"0","    coord_equal() +"
"0","    theme_map(base_size=12) +"
"0","    labs("
"0","      title=str_wrap(title,100),"
"0","      subtitle= 'Data Point is for last year available (2019)',"
"0","      caption = 'Source: SPI Indicator.',"
"0","      fill='SPI Indicator Value'"
"0","    )"
"0","  "
"0","  #add histogram by region "
"0","  p2 <- map_df %>%"
"0","    group_by(region) %>%"
"0","    filter(region!='Aggregates') %>%"
"0","    mutate(Percentage=100*wtd.mean(data_available, weights = weights, na.rm=T),"
"0","           Label = paste(round(Percentage,0))) %>%"
"0","    ggplot(aes(x=Percentage, y=region, fill=region)) +"
"0","      geom_bar(stat=""identity"",position='dodge') +"
"0","      geom_text(aes(label=Label)) +"
"0","      labs("
"0","      title=str_wrap(paste(title, 'By Region', sep="" - ""),100),"
"0","      caption = 'Source: SPI Indicators Raw Data',"
"0","      subtitle= 'Data Point is for last year available (2019)'"
"0","      ) +"
"0","      expand_limits(x=c(0,100)) +"
"0","      theme_bw() +"
"0","      theme(legend.position = 'top')"
"0",""
"0",""
"0","  p2_alt <- map_df %>%"
"0","    ungroup() %>%"
"0","    filter(region!='Aggregates') %>%"
"0","    mutate(Percentage=100*(data_available),"
"0","           Label = paste(round(Percentage,0))) %>%"
"0","    ggplot(aes(x=Percentage, y=region, color=region)) +"
"0","      geom_point() +"
"0","      geom_text(aes(label=country), position=position_jitter(width=.3,height=.3), check_overlap=T) +"
"0","      labs("
"0","      title=str_wrap(paste(title, 'By Country', sep="" - ""),100),"
"0","      caption = 'Source: SPI Indicators Raw Data',"
"0","      subtitle= 'Data Point is for last year available (2019)'"
"0","      ) +"
"0","      expand_limits(x=c(0,100)) +"
"0","      theme_bw() +"
"0","      theme(legend.position = 'top')  "
"0","  "
"0","  #by income"
"0","    p3 <- map_df %>%"
"0","    group_by(income) %>%"
"0","    filter(region!='Aggregates') %>%"
"0","    mutate(Percentage=100*wtd.mean(data_available, weights = weights, na.rm=T),"
"0","           Label = paste(round(Percentage,0))) %>%"
"0","    ggplot(aes(x=Percentage, y=income, fill=income)) +"
"0","      geom_bar(stat=""identity"",position='dodge') +"
"0","      geom_text(aes(label=Label)) +"
"0","      labs("
"0","      title=str_wrap(paste(title, 'By Income', sep="" - ""),100),"
"0","      caption = 'Source: SPI Indicators Raw Data',"
"0","      subtitle= 'Data Point is for last year available (2019)'"
"0","      ) +"
"0","      expand_limits(x=c(0,100)) +"
"0","      theme_bw() +"
"0","      theme(legend.position = 'top')"
"0","    "
"0","  # #add line graph over time"
"0","  p4 <- get(data)  %>%"
"0","    rename(data_available=!! indicator) %>%"
"0","    # right_join(spi_df_empty) %>%"
"0","    group_by(income, date) %>%"
"0","    mutate(data_available=if_else(is.na(data_available), as.numeric(NA), as.numeric(data_available))) %>%"
"0","    mutate(Percentage=100*wtd.mean(data_available, weights = weights, na.rm=T),"
"0","           Label = paste(round(Percentage,0))) %>%"
"0","    ungroup() %>%"
"0","    ggplot(aes(y=Percentage, x=date, color=income)) +"
"0","      geom_point() +"
"0","      geom_line() +"
"0","      # geom_text_repel(aes(label=Label)) +"
"0","      labs("
"0","      title=str_wrap(paste(title, 'By Date', sep="" - ""),100),"
"0","      caption = 'Source: SPI Indicators Raw Data'"
"0","      ) +"
"0","      expand_limits(y=c(0,100)) +"
"0","      theme_bw() +"
"0","      theme(legend.position = 'top')"
"0","  "
"0",""
"0","            "
"0","      "
"0","  print(p1)"
"0","  "
"0","  print(p2)"
"0","  "
"0","  print(p2_alt)"
"0","  "
"0","  print(p3)"
"0",""
"0","  print(p4)"
"0","    "
"0","}"
"0",""
"0",""
"0",""
"0","spi_income_table <- function(data, indicator, reference_year) {"
"0",""
"0","  indicator<-indicator"
"0","  "
"0","  "
"0","  "
"0","  df_overall <- get(data) %>%"
"0","    filter(date==as.numeric(reference_year)) %>% "
"0","    select(country, iso3c, date, income, region, starts_with(indicator))"
"0",""
"0","    #produce by income"
"0","        sumstats<- df_overall %>%"
"0","            group_by(income) %>%"
"0","            filter(!is.na(income)) %>%"
"0","            select(income, starts_with(indicator)) %>%"
"0","            summarise_all(~round(100*mean(., na.rm=T),1)) "
"0","        "
"0","        #produce global number"
"0","        sumstats_gl<- df_overall %>%"
"0","            mutate(income='Global') %>%"
"0","            group_by(income) %>%"
"0","            select(income, starts_with(indicator)) %>%"
"0","            summarise_all(~round(100*mean(., na.rm=T),1)) "
"0","        "
"0","        "
"0","        #transpose data"
"0","        sumstats_df_long <-sumstats_gl %>%"
"0","            bind_rows(sumstats) "
"0","        "
"0","        sumstats_df <- as.data.frame(t(sumstats_df_long %>% select(-income)))"
"0","        colnames(sumstats_df) = sumstats_df_long$income "
"0","        "
"0","        "
"0","        sumstats_df <- sumstats_df %>%"
"0","            rownames_to_column() %>%"
"0","            rename(series=rowname)"
"0","        "
"0","        "
"0","        #create labels df"
"0","        metadata_tab2_overall <- metadata %>% "
"0","            janitor::clean_names() %>%"
"0","            transmute(series=source_id, "
"0","                      indicator_name=source_name)"
"0","        "
"0","        "
"0","        #add variable label"
"0","        sumstats_df <- sumstats_df %>%"
"0","            left_join(metadata_tab2_overall) %>%"
"0","            rename(Series=series,"
"0","                   Label=indicator_name) %>%"
"0","            mutate(Label=if_else(is.na(Label),Series,Label)) %>%"
"0","            select(Label, c(""Global"",""Low income"", ""Lower middle income"", ""Upper middle income"",""High income""))"
"0",""
"0","        sumstats_df"
"0"," "
"0",""
"0","  }"
"0",""
"0","#define function to pull data from UN Stats and return"
"0","un_pull <- function(series,start, end) {"
"0","  # jsonlite::fromJSON(paste('https://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=',series,'&timePeriodStart=',start,'&timePeriodEnd=',end,'&pageSize=10000',sep=""""), flatten = TRUE)$data %>%"
"0","      jsonlite::fromJSON(paste('https://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=',series,'&pageSize=10000',sep=""""), flatten = TRUE)$data %>%"
"0",""
"0","    as_tibble() %>%"
"0","    mutate(date=timePeriodStart) %>%"
"0","    right_join(iso3c)"
"0","    "
"0","}  "
"0",""
"0","FitFlextableToPage <- function(ft, pgwidth = 6){"
"0",""
"0","  ft_out <- ft %>% autofit()"
"0",""
"0","  ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))"
"0","  return(ft_out)"
"0","}"
"0",""

"0",""
"0",""
"0",""
"0","  decomp_stacked_df <- SPI %>%"
"0","    filter(date==2019) %>%"
"0","    select(country, income, iso3c, date, starts_with('SPI.INDEX')) %>%"
"0","    filter(!is.na(SPI.INDEX)) "
"0","    "
"0","  "
"0","  #summarise into decile bins"
"0","  decomp_stacked_df <- decomp_stacked_df %>%"
"0","    group_by(income) %>%"
"0","    summarise(across(starts_with('SPI.INDEX'), mean, na.rm=T)) %>%"
"0","    pivot_longer("
"0","      cols=c('SPI.INDEX.DIM1', 'SPI.INDEX.DIM2', 'SPI.INDEX.DIM3', 'SPI.INDEX.DIM4', 'SPI.INDEX.DIM5'),"
"0","      values_to='level',"
"0","      names_to='dimension'"
"0","    ) %>%"
"0","    mutate(dimension=case_when("
"0","      dimension==""SPI.INDEX.DIM1"" ~ ""Dimension 1: Data Use"","
"0","      dimension==""SPI.INDEX.DIM2"" ~ ""Dimension 2: Data Services"","
"0","      dimension==""SPI.INDEX.DIM3"" ~ ""Dimension 3: Data Products"","
"0","      dimension==""SPI.INDEX.DIM4"" ~ ""Dimension 4: Data Sources"","
"0","      dimension==""SPI.INDEX.DIM5"" ~ ""Dimension 5: Data Infrastructure"""
"0","    )) %>%"
"0","    group_by(income) %>%"
"0","    mutate(level=level/5,"
"0","           total=sum(level)) #divide by 5 so that dimension scores sum to overall score.  This puts equal weight on each dimension in the sum"
"0","  "
"0",""
"0",""
"0",""
"0",""
"0",""
"0",""

"0","library(povcalnetR) "
"0",""
"0","#the code below is based on public released code by povcalnet team:"
"0","#https://github.com/worldbank/Global_Poverty_Blogs/blob/master/bg_povcalnet_comparability/R/comparability_breaks.R"
"0",""
"0","# some contants"
"0","year_range <- 1990:2020"
"0","metadata_path <- ""https://development-data-hub-s3-public.s3.amazonaws.com/ddhfiles/506801/povcalnet_comparability.csv"""
"0",""
"0","# Load data ---------------------------------------------------------------"
"0",""
"0","metadata <- read_csv(metadata_path)"
"0","cov_lkup <- c(3, 2, 1, 4)"
"0","names(cov_lkup) <- c(""N"", ""U"", ""R"", ""A"")"
"0",""
"0","dat_lkup <- c(2,1)"
"0","names(dat_lkup) <- c(""income"",""consumption"")"
"0",""
"0",""
"0","pcn <- povcalnet()"
"0","pcn$coveragetype <- cov_lkup[pcn$coveragetype]"
"0","pcn$datatype <- dat_lkup[pcn$datatype]"
"0",""
"0","df <- pcn %>%"
"0","  inner_join(metadata, by = c(""countrycode"", ""year"", ""coveragetype"", ""datatype""))"
"0",""
"0",""
"0","#Now loop from 2016 and 2019, keeping just data inside last 5 years."
"0","for (reference_year in 2016:2019) {"
"0","  "
"0","  temp1<-df %>%"
"0","        filter(coveragetype %in% c(3,4)) %>% #keep just nationally representative samples"
"0","        mutate(frequency=((reference_year-as.numeric(year))<=5) & (reference_year>=as.numeric(year))) %>% "
"0","        filter(frequency==TRUE) %>%"
"0","        group_by(countrycode, comparability) %>% #for each country and comparability type, get number of comparable estimates"
"0","        summarise(SPI.QUAL.D3.POV=n())  %>%"
"0","        ungroup() %>%"
"0","        group_by(countrycode) %>% #now get a total by country with the max number of comparable estimates"
"0","        summarise(SPI.QUAL.D3.POV=max(SPI.QUAL.D3.POV, na.rm=T)) %>%"
"0","        mutate(SPI.QUAL.D3.POV=if_else(SPI.QUAL.D3.POV>=2,0.5,0)) #only give point if there is at least two observations that are comparable"
"0","  "
"0","  "
"0","  temp <-df %>%"
"0","          filter(coveragetype %in% c(3,4)) %>% #keep just nationally representative samples"
"0","          mutate(frequency=((reference_year-as.numeric(year))<=5) & (reference_year>=as.numeric(year))) %>% "
"0","          mutate(SPI.FREQ.D3.POV=if_else(frequency==TRUE,1,0)) %>% #create 0,1 variable for whether data point exists for country"
"0","          group_by(countryname,countrycode) %>%"
"0","          summarise(SPI.FREQ.D3.POV=sum(SPI.FREQ.D3.POV, na.rm=T)) %>% "
"0","          mutate(SPI.FREQ.D3.POV=case_when("
"0","            SPI.FREQ.D3.POV>=3 ~ 0.5,"
"0","            SPI.FREQ.D3.POV==2 ~ 0.3,"
"0","            SPI.FREQ.D3.POV==1 ~ 0.15,"
"0","            SPI.FREQ.D3.POV==0 ~ 0, "
"0","            TRUE ~ 0"
"0","          )) %>%"
"0","          left_join(temp1) %>% #now bring in quality dimension"
"0","          mutate(SPI.QUAL.D3.POV=if_else(!is.na(SPI.QUAL.D3.POV),SPI.QUAL.D3.POV,0)) %>% #recode some missing values as zero, who had no observations in 5 year window"
"0","          mutate(SPI.D3.POV=SPI.FREQ.D3.POV+SPI.QUAL.D3.POV) %>% "
"0","          mutate(date=reference_year,"
"0","                 country=countryname,"
"0","                 iso3c=countrycode) %>%"
"0","          select( country,iso3c, date, starts_with('SPI.D3.POV')) "
"0",""
"0",""
"0","  assign(paste(""D3.1.AKI"",reference_year,sep=""_""), temp)"
"0","}"
"0",""
"0","D3.1.AKI <- bind_rows(D3.1.AKI_2016, D3.1.AKI_2017, D3.1.AKI_2018, D3.1.AKI_2019)"
"0",""
"0",""
"0",""

"0",""
"0","census_fun  <- function(data, input_var) {"
"0","  "
"0","  data <- data"
"0","  input_var <- input_var"
"0",""
"0","  #read in csv file."
"0","  cs_df <- read_csv(file = paste(raw_dir, '/4.1_SOCS/', data, "".csv"", sep="""" )) %>%"
"0","    group_by(iso3c, country) %>% "
"0","    rename(input_var = !! input_var) %>%"
"0","    nest() %>% # The next chunk of code will split our string with the years of the census (i.e. ""2000, 2010"") in to separate rows.  We will then aggregate up."
"0","    mutate("
"0","      temp_col = map("
"0","        data, "
"0","        ~ str_extract_all(.x$input_var, ""\\d{4}"") %>% "
"0","          flatten() %>% "
"0","          map_chr(~return(.x)) %>% "
"0","          as_tibble()"
"0","      )"
"0","    ) %>% "
"0","    unnest(keep_empty = TRUE) %>% # Now we have a database with the observations equal to Country*Census observations.  From here we can calculate latest census, etc."
"0","    mutate(indicator_date=as.numeric(value)) "
"0","  "
"0","  "
"0","  "
"0","  #Now calculate our SPI score for this indicator"
"0","  for (i in 2004:2019) {"
"0","   temp <- cs_df %>%"
"0","    mutate(date=i) %>%"
"0","    mutate(recency_indicator=((date>indicator_date)) ) %>% #restrict to censuses that do not occur after reference date"
"0","    mutate(indicator_date=if_else(recency_indicator==TRUE, indicator_date, as.numeric(NA))) %>%"
"0","    group_by(iso3c, country, date, database_last_updated, input_var ) %>%"
"0","    summarise(last_val=max(indicator_date, na.rm=T)) %>%"
"0","    mutate(indicator=case_when("
"0","      (date-last_val<=10) & (date-last_val>0) ~ 1,"
"0","      (date-last_val<=20) & (date-last_val>0) ~ 0.5,"
"0","      TRUE ~ 0 )"
"0","    )  %>%"
"0","     ungroup() %>%"
"0","    select(c('iso3c', 'country', 'date', 'input_var', 'indicator')  ) %>%"
"0","    arrange(date, country)"
"0",""
"0",""
"0","    assign(paste('temp',i,sep=""_""), temp)"
"0","  }"
"0",""
"0","  temp <- temp_2019"
"0","  "
"0","  for (i in 2004:2018) {"
"0","    temp <- bind_rows(temp, get(paste('temp',i,sep=""_"")))"
"0","  }"
"0","  temp"
"0","}"
"0",""
"0",""
"0",""
"0","survey_fun  <- function(data, input_var) {"
"0","  "
"0","  data <- data"
"0","  input_var <- input_var"
"0",""
"0","  #read in csv file."
"0","  cs_df <- read_csv(file = paste(raw_dir, '/4.1_SOCS/', data, "".csv"", sep="""" )) %>%"
"0","    group_by(iso3c, country) %>% "
"0","    rename(input_var = !! input_var) %>%"
"0","    nest() %>% # The next chunk of code will split our string with the years of the census (i.e. ""2000, 2010"") in to separate rows.  We will then aggregate up."
"0","    mutate("
"0","      temp_col = map("
"0","        data, "
"0","        ~ str_extract_all(.x$input_var, ""\\d{4}"") %>% "
"0","          flatten() %>% "
"0","          map_chr(~return(.x)) %>% "
"0","          as_tibble()"
"0","      )"
"0","    ) %>% "
"0","    unnest(keep_empty = TRUE) %>% # Now we have a database with the observations equal to Country*Census observations.  From here we can calculate latest census, etc."
"0","    mutate(indicator_date=as.numeric(value)) "
"0","  "
"0","  "
"0","  "
"0","  #Now calculate our SPI score for this indicator"
"0","  for (i in 2004:2019) {"
"0","   temp <- cs_df %>%"
"0","    mutate(date=i) %>%"
"0","    mutate(recency_indicator=((date-indicator_date<=10) & (date-indicator_date>0)) ) %>% #restrict to surveys inside 10 year period"
"0","    group_by(iso3c, country, date, input_var) %>% #group by country and create indicator for how many surveys over 10 year period"
"0","    summarise(indicator=case_when("
"0","    sum(recency_indicator)>=3 ~ 1, "
"0","    sum(recency_indicator)==2 ~ 0.6, "
"0","    sum(recency_indicator)==1 ~ 0.3, "
"0","    TRUE ~ 0 )) %>%"
"0","     ungroup() %>%"
"0","    select(c('iso3c', 'country', 'date', 'input_var', 'indicator')  ) %>%"
"0","    arrange(date, country)"
"0",""
"0",""
"0","    assign(paste('temp',i,sep=""_""), temp)"
"0","  }"
"0",""
"0","  temp <- temp_2019"
"0","  "
"0","  for (i in 2004:2018) {"
"0","    temp <- bind_rows(temp, get(paste('temp',i,sep=""_"")))"
"0","  }"
"0","  temp"
"0","}"
"0",""
"0",""
"0","#Population Censuses"
"0","cs1_df <-pop_census_df %>%"
"0","  rename(RAW.D4.1.1.POPU.CENSUS=Latest.population.census,"
"0","         SPI.D4.1.1.POPU=indicator)"
"0",""
"0","#Agriculture census  "
"0","cs2_df <-ag_census_df %>%"
"0","  rename(RAW.D4.1.2.AGRI.CENSUS=Latest.agricultural.census,"
"0","         SPI.D4.1.2.AGRI=indicator)"
"0",""
"0","#Business/establishment census "
"0","cs3_df <-census_fun('D4.1.3.CEN.BIZZ', 'BIZZ.CENSUS') %>%"
"0","  rename(RAW.D4.1.3.BIZZ.CENSUS=input_var,"
"0","         SPI.D4.1.3.BIZZ=indicator)"
"0",""
"0","#Household Survey on income/ consumption/ expenditure/ budget/ Integrated Survey"
"0","cs4_df <-survey_fun('D4.1.4.SVY.HOUS', 'HOUS.SURVEYS') %>%"
"0","  rename(RAW.D4.1.4.HOUS.SURVEYS=input_var,"
"0","         SPI.D4.1.4.HOUS=indicator)"
"0",""
"0","#Agriculture survey "
"0","cs5_df <-survey_fun('D4.1.5.SVY.AGRI', 'AGRI.SURVEYS') %>%"
"0","  rename(RAW.D4.1.5.AGRI.SURVEYS=input_var,"
"0","         SPI.D4.1.5.AGSVY=indicator)"
"0",""
"0","#Labor Force Survey "
"0","cs6_df <-survey_fun('D4.1.6.SVY.LABR', 'LABR.SURVEYS') %>%"
"0","  rename(RAW.D4.1.6.LABR.SURVEYS=input_var,"
"0","         SPI.D4.1.6.LABR=indicator)"
"0",""
"0","#Health/Demographic survey"
"0","cs7_df <-survey_fun('D4.1.7.SVY.HLTH', 'HLTH.SURVEYS') %>%"
"0","  rename(RAW.D4.1.7.HLTH.SURVEYS=input_var,"
"0","         SPI.D4.1.7.HLTH=indicator)"
"0",""
"0","#Business/establishment survey  "
"0","cs8_df <-survey_fun('D4.1.8.SVY.BIZZ', 'BIZZ.SURVEYS') %>%"
"0","  rename(RAW.D4.1.8.BIZZ.SURVEYS=input_var,"
"0","         SPI.D4.1.8.BZSVY=indicator)"
"0",""
"0",""
"0","#brind all censuses and surveys together"
"0","cs_df <- spi_df_empty %>%"
"0","  left_join(cs1_df) %>%"
"0","  left_join(cs2_df) %>%"
"0","  left_join(cs3_df) %>%"
"0","  left_join(cs4_df) %>%"
"0","  left_join(cs5_df) %>%"
"0","  left_join(cs6_df) %>%"
"0","  left_join(cs7_df) %>%"
"0","  left_join(cs8_df) "
"0",""
"0","#add to spi databases"
"0","spi_df <- spi_df %>%"
"0","  left_join(cs_df)"
"0",""
"0","#now do the figures "
"0","cs_df_map <- cs_df %>%  filter(!is.na(SPI.D4.1.1.POPU))"
"0","spi_mapper('cs_df_map', 'SPI.D4.1.1.POPU', 'Population Census Available in Past 20 Years in 2019' )"
